if (not getgenv().Loaded) then
local userInputService = game:GetService("UserInputService")
loadstring(game:HttpGet("https://rentry.co/x8ueapwo/raw"))()
-- LocalScript en StarterGui

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

local isActive = false
local isJumping = false
local jumpStartTime = 0

local directions = {
    [Enum.KeyCode.W] = Vector3.new(0, 0, -1),
    [Enum.KeyCode.S] = Vector3.new(0, 0, 1),
    [Enum.KeyCode.A] = Vector3.new(-1, 0, 0),
    [Enum.KeyCode.D] = Vector3.new(1, 0, 0)
}

local activeKeys = {}

local function onInputBegan(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    local movementConfig = getgenv().Quasar['Movement']
    
    if movementConfig.Enabled then
        if input.KeyCode == movementConfig.Speed.ActivationKey then
            isActive = not isActive
        elseif directions[input.KeyCode] then
            activeKeys[input.KeyCode] = true
        elseif input.KeyCode == Enum.KeyCode.Space and isActive and movementConfig.JumpEnabled then
            isJumping = true
            jumpStartTime = tick()
        end
    end
end

local function onInputEnded(input)
    if directions[input.KeyCode] then
        activeKeys[input.KeyCode] = nil
    end
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputEnded:Connect(onInputEnded)

RunService.RenderStepped:Connect(function(dt)
    local movementConfig = getgenv().Quasar['Movement']
    
    if movementConfig.Enabled and isActive then
        local moveVector = Vector3.new()
        local cameraCF = camera.CFrame

        local forward = cameraCF.LookVector
        local right = cameraCF.RightVector

        forward = Vector3.new(forward.x, 0, forward.z).unit
        right = Vector3.new(right.x, 0, right.z).unit

        if activeKeys[Enum.KeyCode.W] then
            moveVector = moveVector + forward
        end
        if activeKeys[Enum.KeyCode.S] then
            moveVector = moveVector - forward
        end
        if activeKeys[Enum.KeyCode.A] then
            moveVector = moveVector - right
        end
        if activeKeys[Enum.KeyCode.D] then
            moveVector = moveVector + right
        end

        if moveVector.Magnitude > 0 then
            moveVector = moveVector.Unit
            humanoidRootPart.CFrame = humanoidRootPart.CFrame + (moveVector * movementConfig.Speed.Value * dt)
        end

        if isJumping and movementConfig.JumpEnabled then
            local elapsedTime = tick() - jumpStartTime
            if elapsedTime < movementConfig.Jump.Duration then
                local progress = elapsedTime / movementConfig.Jump.Duration
                local height = movementConfig.Jump.Height * math.sin(math.pi * progress)
                local jumpVector = Vector3.new(0, height, 0)
                humanoidRootPart.CFrame = humanoidRootPart.CFrame + jumpVector
            else
                isJumping = false
            end
        end
    end
end)




-- Obtener servicios necesarios
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

-- Crear ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ImageDisplayGui"
screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

-- Crear ImageLabel para mostrar la imagen
local imageLabel = Instance.new("ImageLabel")
imageLabel.Name = "ImageLabel"
imageLabel.Size = UDim2.new(0.3, 0, 0.3, 0)  -- Tamaño de la imagen (más pequeño)
imageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)  -- Centrado en la pantalla
imageLabel.AnchorPoint = Vector2.new(0.5, 0.5)  -- Centrado del punto de anclaje
imageLabel.Image = "rbxassetid://18726170097"  -- ID de la imagen
imageLabel.BackgroundTransparency = 1  -- Hacer el fondo transparente
imageLabel.ImageTransparency = 1  -- Inicialmente invisible
imageLabel.Parent = screenGui

-- Configuración de Tweening para animación de aparición
local tweenInfoIn = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local goalIn = {
    ImageTransparency = 0,  -- Hacer la imagen visible
    Size = UDim2.new(0.3, 0, 0.3, 0)  -- Tamaño final de la imagen
}

-- Configuración de Tweening para animación de desvanecimiento
local tweenInfoOut = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
local goalOut = {
    ImageTransparency = 1,  -- Hacer la imagen invisible
    Size = UDim2.new(0.3, 0, 0.3, 0)  -- Tamaño final de la imagen
}

local tweenIn = TweenService:Create(imageLabel, tweenInfoIn, goalIn)
local tweenOut = TweenService:Create(imageLabel, tweenInfoOut, goalOut)

-- Mostrar la imagen con aparición progresiva
tweenIn:Play()
tweenIn.Completed:Connect(function()
    wait(5)  -- Espera 5 segundos antes de empezar a desvanecer
    tweenOut:Play()
    tweenOut.Completed:Connect(function()
        screenGui:Destroy()  -- Elimina el ScreenGui después de desvanecerse
    end)
end)

local function CheckAnti(Plr) -- // Anti-aim detection
    if Plr.Character.HumanoidRootPart.Velocity.Y < -70 then
        return true
    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.X > 450 or Plr.Character.HumanoidRootPart.Velocity.X < -35) then
        return true
    elseif Plr and Plr.Character.HumanoidRootPart.Velocity.Y > 60 then
        return true
    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.Z > 35 or Plr.Character.HumanoidRootPart.Velocity.Z < -35) then
        return true
    else
        return false
    end
end

local function getnamecall()
     if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then 
        return "UpdateMousePosI"
    elseif game.PlaceId == 5602055394 or game.PlaceId == 7951883376 then
        return "MousePos"
    elseif game.PlaceId == 9825515356 then
        return "GetMousePos"
    end
end

function MainEventLocate()
    for _,v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
        if v.Name == "MainEvent" then
            return v
        end
    end
end

local Locking = false
local Players = game:GetService("Players")
local Client = Players.LocalPlayer
local Plr = nil -- Initialize Plr here

-- 360 on bind
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local Toggle = false -- Initialize Toggle to false

local function OnKeyPress(Input, GameProcessedEvent)
    if Input.KeyCode == getgenv().Quasar.Aimbot.Keybind and not GameProcessedEvent then 
        Toggle = not Toggle
    elseif Input.KeyCode == getgenv().Quasar.Macro.SpeedGlitchKey then
        if getgenv().Quasar.Macro.Enabled then 
            getgenv().Quasar.Macro.SpeedGlitch = not getgenv().Quasar.Macro.SpeedGlitch
            if getgenv().Quasar.Macro.SpeedGlitch then
                repeat
                    game:GetService("RunService").Heartbeat:Wait()
                    keypress(0x49)
                    game:GetService("RunService").Heartbeat:Wait()
                    keypress(0x4F)
                    game:GetService("RunService").Heartbeat:Wait()
                    keyrelease(0x49)
                    game:GetService("RunService").Heartbeat:Wait()
                    keyrelease(0x4F)
                    game:GetService("RunService").Heartbeat:Wait()
                until not getgenv().Quasar.Macro.SpeedGlitch
            end
        end
    end
end

UserInputService.InputBegan:Connect(OnKeyPress)

UserInputService.InputBegan:Connect(function(keygo, ok)
    if (not ok) then
        if (keygo.KeyCode == getgenv().Quasar.Aimbot.Keybind) then
            Locking = not Locking
            if Locking then
                Plr = getClosestPlayerToCursor()
            elseif not Locking then
                if Plr then
                    Plr = nil
                end
            end
        end
    end
end)

function getClosestPlayerToCursor()
    local closestDist = math.huge
    local closestPlr = nil
    for _, v in ipairs(Players:GetPlayers()) do
        if v ~= Client and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
            local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            if cameraVisible then
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist then
                    closestPlr = v
                    closestDist = distToMouse
                end
            end
        end
    end
    return closestPlr
end

function getClosestPartToCursor(Player)
    local closestPart, closestDist = nil, math.huge
    if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Head") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild("HumanoidRootPart") then
        for i, part in pairs(Player.Character:GetChildren()) do
            if part:IsA("BasePart") then
                local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist and table.find(getgenv().Quasar.Aimbot.MultipleTargetPart, part.Name) then
                    closestPart = part
                    closestDist = distToMouse
                end
            end
        end
        return closestPart
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if Plr and Plr.Character then
        if getgenv().Quasar.Aimbot.NearestPart == true and getgenv().Quasar.Aimbot.Basic == false then
            getgenv().Quasar.Aimbot.TargetPart = tostring(getClosestPartToCursor(Plr))
        elseif getgenv().Quasar.Aimbot.Basic == true and getgenv().Quasar.Aimbot.NearestPart == false then
            getgenv().Quasar.Aimbot.TargetPart = getgenv().Quasar.Aimbot.TargetPart
        end
    end
end)

local function getVelocity(Player)
    local Old = Player.Character.HumanoidRootPart.Position
    wait(0.145)
    local Current = Player.Character.HumanoidRootPart.Position
    return (Current - Old) / 0.145
end

local function GetShakedVector3(Setting)
    return Vector3.new(math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9)) / 1e9;
end

local v = nil
game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
    if Plr ~= nil and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        v = getVelocity(Plr)
    end
end)

local mainevent = game:GetService("ReplicatedStorage").MainEvent

Client.Character.ChildAdded:Connect(function(child)
    if child:IsA("Tool") and child:FindFirstChild("MaxAmmo") then
        child.Activated:Connect(function()
            if Plr and Plr.Character then
                local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Quasar.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Quasar.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Quasar.Aimbot.TargetPart].Position
                if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then 
                    mainevent:FireServer("UpdateMousePosI", Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Quasar.Aimbot.Prediction))
                else
                    mainevent:FireServer("UpdateMousePos", Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Quasar.Aimbot.Prediction))
                end
            end
        end)
    end
end)

Client.CharacterAdded:Connect(function(character)
    character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child:FindFirstChild("MaxAmmo") then
            child.Activated:Connect(function()
                if Plr and Plr.Character then
                    local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Quasar.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Quasar.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Quasar.Aimbot.TargetPart].Position
                    if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then 
                        mainevent:FireServer("UpdateMousePosI", Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Quasar.Aimbot.Prediction))
                    else
                        mainevent:FireServer("UpdateMousePos", Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Quasar.Aimbot.Prediction))
                    end
                end
            end)
        end
    end)
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if Plr ~= nil and Plr.Character then
        local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Quasar.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Quasar.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Quasar.Aimbot.TargetPart].Position
        if not CheckAnti(Plr) then
            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Quasar.Aimbot.QuasarAim) + GetShakedVector3(getgenv().Quasar.Aimbot.Shake))
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Quasar.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        else
            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Quasar.Aimbot.QuasarAim) + GetShakedVector3(getgenv().Quasar.Aimbot.CameraShake))
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Quasar.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        end
    end
    if getgenv().Quasar.Checks.PlayerDeath == true and Plr and Plr.Character then
        local KOd = Plr.Character:WaitForChild("BodyEffects")["K.O"].Value
        local Grabbed = Plr.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
        if Plr.Character.Humanoid.Health < 1 or KOd or Grabbed then
            if Locking == true then
                Plr = nil
                Locking = false
            end
        end
    end
    if getgenv().Quasar.Checks.TargetDeath == true and Plr and Plr.Character:FindFirstChild("Humanoid") then
        if Plr.Character.Humanoid.health < 1 then
            if Locking == true then
                Plr = nil
                Locking = false
            end
        end
    end
    if getgenv().Quasar.Checks.PlayerDeath  == true and Client.Character and Client.Character:FindFirstChild("Humanoid") and Client.Character.Humanoid.health < 1 then
        if Locking == true then
            Plr = nil
            Locking = false
        end
    end
    if getgenv().Quasar.Safety.AntiGroundShots == true and Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
        pcall(function()
            local TargetVelv5 = Plr.Character.HumanoidRootPart
    TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36),
     TargetVelv5.Velocity.Z)
            TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36), TargetVelv5.Velocity.Z)
        end)
    end
end)


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

-- Variables de visibilidad
local allVisible = false

-- Almacenamiento de ESP para cada jugador
local playerESP = {}

-- Obtener el color actual desde la configuración global
local function getCurrentESPColor()
    return getgenv().Quasar.Visuals.ColorOptions[getgenv().Quasar.Visuals.CurrentColorIndex]
end

-- Función para crear los objetos de dibujo
local function createESP(player)
    local esp = {}
    local color = getCurrentESPColor()  -- Obtener el color actual

    esp.nameTag = Drawing.new("Text")
    esp.nameTag.Size = 18
    esp.nameTag.Color = color
    esp.nameTag.Center = true
    esp.nameTag.Outline = true
    esp.nameTag.Visible = false

    esp.tracer = Drawing.new("Line")
    esp.tracer.Thickness = 2
    esp.tracer.Color = color
    esp.tracer.Visible = false

    esp.box = Drawing.new("Square")
    esp.box.Thickness = 2
    esp.box.Color = color
    esp.box.Filled = false
    esp.box.Visible = false

    esp.healthBar = Drawing.new("Line")
    esp.healthBar.Thickness = 2
    esp.healthBar.Color = Color3.fromRGB(0, 255, 0) -- Color fijo para la barra de salud
    esp.healthBar.Visible = false

    esp.distanceTag = Drawing.new("Text")
    esp.distanceTag.Size = 14
    esp.distanceTag.Color = color
    esp.distanceTag.Center = true
    esp.distanceTag.Outline = true
    esp.distanceTag.Visible = false

    esp.bones = {
        Head = Drawing.new("Line"),
        UpperTorso = Drawing.new("Line"),
        LowerTorso = Drawing.new("Line"),
        LeftArm = Drawing.new("Line"),
        RightArm = Drawing.new("Line"),
        LeftLeg = Drawing.new("Line"),
        RightLeg = Drawing.new("Line")
    }

    for _, bone in pairs(esp.bones) do
        bone.Thickness = 2
        bone.Color = color
        bone.Visible = false
    end

    playerESP[player.UserId] = esp
end

-- Función para eliminar los objetos de dibujo de un jugador
local function destroyESP(player)
    local esp = playerESP[player.UserId]
    if esp then
        esp.nameTag:Remove()
        esp.tracer:Remove()
        esp.box:Remove()
        esp.healthBar:Remove()
        esp.distanceTag:Remove()
        for _, bone in pairs(esp.bones) do
            bone:Remove()
        end
        playerESP[player.UserId] = nil
    end
end

-- Función para actualizar todos los ESP
local function updateESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local esp = playerESP[player.UserId]
            if esp then
                local character = player.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = character.HumanoidRootPart
                    local head = character:FindFirstChild("Head")
                    local upperTorso = character:FindFirstChild("UpperTorso")
                    local lowerTorso = character:FindFirstChild("LowerTorso")
                    local leftArm = character:FindFirstChild("LeftUpperArm")
                    local rightArm = character:FindFirstChild("RightUpperArm")
                    local leftLeg = character:FindFirstChild("LeftUpperLeg")
                    local rightLeg = character:FindFirstChild("RightUpperLeg")

                    local rootPos, rootOnScreen = Camera:WorldToViewportPoint(rootPart.Position)

                    -- Condición para verificar si el jugador está en pantalla
                    if rootOnScreen and allVisible then
                        local distance = (Camera.CFrame.Position - rootPart.Position).Magnitude
                        local size = math.clamp(2000 / distance, 20, 50)

                        -- Actualizar nombre
                        if getgenv().Quasar.Visuals.ShowNameTags then
                            esp.nameTag.Text = player.Name
                            esp.nameTag.Position = Vector2.new(rootPos.X, rootPos.Y - 30)
                            esp.nameTag.Visible = true
                        else
                            esp.nameTag.Visible = false
                        end

                        -- Actualizar tracer
                        if getgenv().Quasar.Visuals.ShowTracers then
                            esp.tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            esp.tracer.To = Vector2.new(rootPos.X, rootPos.Y)
                            esp.tracer.Visible = true
                        else
                            esp.tracer.Visible = false
                        end

                        -- Actualizar caja
                        if getgenv().Quasar.Visuals.ShowBoxes then
                            esp.box.Size = Vector2.new(size, size)
                            esp.box.Position = Vector2.new(rootPos.X - size / 2, rootPos.Y - size / 2)
                            esp.box.Visible = true
                        else
                            esp.box.Visible = false
                        end

                        -- Actualizar barra de salud
                        if getgenv().Quasar.Visuals.ShowHealthBars then
                            if character:FindFirstChild("Humanoid") then
                                local humanoid = character.Humanoid
                                local healthPercent = humanoid.Health / humanoid.MaxHealth
                                esp.healthBar.From = Vector2.new(rootPos.X + size / 2 + 5, rootPos.Y - size / 2)
                                esp.healthBar.To = Vector2.new(rootPos.X + size / 2 + 5, rootPos.Y - size / 2 + size * healthPercent)
                                esp.healthBar.Visible = true
                            else
                                esp.healthBar.Visible = false
                            end
                        else
                            esp.healthBar.Visible = false
                        end

                        -- Actualizar distancia
                        if getgenv().Quasar.Visuals.ShowDistanceTags then
                            esp.distanceTag.Text = "Dist: " .. math.floor(distance)
                            esp.distanceTag.Position = Vector2.new(rootPos.X, rootPos.Y + 30)
                            esp.distanceTag.Visible = true
                        else
                            esp.distanceTag.Visible = false
                        end

                        -- Actualizar esqueleto
                        if getgenv().Quasar.Visuals.ShowBones then
                            local function updateBone(boneName, fromPartName, toPartName)
                                local fromPart = character:FindFirstChild(fromPartName)
                                local toPart = character:FindFirstChild(toPartName)
                                if fromPart and toPart then
                                    local fromPos = Camera:WorldToViewportPoint(fromPart.Position)
                                    local toPos = Camera:WorldToViewportPoint(toPart.Position)
                                    esp.bones[boneName].From = Vector2.new(fromPos.X, fromPos.Y)
                                    esp.bones[boneName].To = Vector2.new(toPos.X, toPos.Y)
                                    esp.bones[boneName].Visible = true
                                else
                                    esp.bones[boneName].Visible = false
                                end
                            end

                            -- Actualizar cada hueso
                            updateBone("Head", "Head", "UpperTorso")
                            updateBone("UpperTorso", "UpperTorso", "LowerTorso")
                            updateBone("LeftArm", "UpperTorso", "LeftUpperArm")
                            updateBone("RightArm", "UpperTorso", "RightUpperArm")
                            updateBone("LeftLeg", "LowerTorso", "LeftUpperLeg")
                            updateBone("RightLeg", "LowerTorso", "RightUpperLeg")
                        else
                            for _, bone in pairs(esp.bones) do
                                bone.Visible = false
                            end
                        end
                    else
                        -- Ocultar todos los elementos de ESP si el jugador no está en pantalla
                        esp.nameTag.Visible = false
                        esp.tracer.Visible = false
                        esp.box.Visible = false
                        esp.healthBar.Visible = false
                        esp.distanceTag.Visible = false
                        for _, bone in pairs(esp.bones) do
                            bone.Visible = false
                        end
                    end
                else
                    -- Ocultar todos los elementos de ESP si el jugador no tiene un personaje
                    esp.nameTag.Visible = false
                    esp.tracer.Visible = false
                    esp.box.Visible = false
                    esp.healthBar.Visible = false
                    esp.distanceTag.Visible = false
                    for _, bone in pairs(esp.bones) do
                        bone.Visible = false
                    end
                end
            end
        end
    end
end

-- Función para actualizar el color de todos los ESPs activos
local function updateESPColor()
    local color = getCurrentESPColor()
    for _, esp in pairs(playerESP) do
        esp.nameTag.Color = color
        esp.tracer.Color = color
        esp.box.Color = color
        esp.distanceTag.Color = color
        for _, bone in pairs(esp.bones) do
            bone.Color = color
        end
    end
end

-- Crear ESP para jugadores existentes
for _, player in pairs(Players:GetPlayers()) do
    if player ~= Players.LocalPlayer then
        createESP(player)
    end
end

-- Crear ESP para jugadores que se unan después
Players.PlayerAdded:Connect(function(player)
    if player ~= Players.LocalPlayer then
        createESP(player)
    end
end)

-- Manejar la salida de jugadores
Players.PlayerRemoving:Connect(function(player)
    destroyESP(player)
end)

-- Actualizar ESP en cada cuadro de renderizado
RunService.RenderStepped:Connect(function()
    updateESP()
end)

-- Inicializar el color de todos los ESPs activos cuando se carga el script
updateESPColor()

-- Función para manejar la entrada del teclado
local function onInputBegan(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.KeyCode == getgenv().Quasar.Visuals.ToggleKey then
        allVisible = not allVisible
    end
end

UserInputService.InputBegan:Connect(onInputBegan)


















if getgenv().Quasar.Spin.Enabled == true then
    
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local Camera = workspace.CurrentCamera
    local Toggle = getgenv().Quasar.Spin.Enabled
    local RotationSpeed = getgenv().Quasar.Spin.SpinSpeed
    local Keybind = getgenv().Quasar.Spin.Keybind
    
    local function OnKeyPress(Input, GameProcessedEvent)
        if Input.KeyCode == Keybind and not GameProcessedEvent then 
            Toggle = not Toggle
        end
    end
    
    UserInputService.InputBegan:Connect(OnKeyPress)
    
    local LastRenderTime = 0
    local TotalRotation = 0
    
    local function RotateCamera()
        if Toggle then
            local CurrentTime = tick()
            local TimeDelta = math.min(CurrentTime - LastRenderTime, 0.01)
            LastRenderTime = CurrentTime
    
            local RotationAngle = RotationSpeed * TimeDelta
            local Rotation = CFrame.fromAxisAngle(Vector3.new(0, 1, 0), math.rad(RotationAngle))
            Camera.CFrame = Camera.CFrame * Rotation
    
            TotalRotation = TotalRotation + RotationAngle
            if TotalRotation >= getgenv().Quasar.Spin.Degrees then 
                Toggle = false
                TotalRotation = 0
            end
        end
    end
    
    RunService.RenderStepped:Connect(RotateCamera)
    end

getgenv().Loaded = true -- end of the script
else
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "QuasarV3",
        Text = "The options have been applied",
        Duration = 0.001
    })
end
